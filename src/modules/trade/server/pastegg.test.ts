import { describe, it, expect, vi, beforeEach } from 'vitest';
import { postToPasteGGOrThrow } from './pastegg';
import { fetchJsonOrTRPCError } from '~/server/api/trpc.router.fetchers';

vi.mock('~/server/api/trpc.router.fetchers', () => ({
  fetchJsonOrTRPCError: vi.fn(),
}));

describe('postToPasteGGOrThrow', () => {
  const mockFetchJsonOrTRPCError = vi.mocked(fetchJsonOrTRPCError);

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should successfully post to paste.gg and return response', async () => {
    const mockResponse = {
      status: 'success',
      result: {
        id: '123',
        created_at: '2024-10-01T00:00:00Z',
        updated_at: '2024-10-01T00:00:00Z',
        files: [{ id: 'file123', name: 'file.txt' }],
      },
    };

    mockFetchJsonOrTRPCError.mockResolvedValue(mockResponse);

    const result = await postToPasteGGOrThrow(
      'Test Title',
      'test.md',
      'Test content',
      'http://example.com',
      30
    );

    expect(fetchJsonOrTRPCError).toHaveBeenCalledWith(
      'https://api.paste.gg/v1/pastes',
      'POST',
      { 'Content-Type': 'application/json' },
      {
        name: 'Test Title',
        description: 'Generated by http://example.com ðŸš€',
        visibility: 'unlisted',
        expires: expect.any(String),
        files: [
          {
            name: 'test.md',
            content: {
              format: 'text',
              value: 'Test content',
            },
          },
        ],
      },
      'PasteGG'
    );
    expect(result).toEqual(mockResponse);
  });

  it('should handle errors from the API', async () => {
    const mockErrorResponse = {
      status: 'error',
      error: 'Some error occurred',
    };

    mockFetchJsonOrTRPCError.mockResolvedValue(mockErrorResponse);

    await expect(
      postToPasteGGOrThrow(
        'Test Title',
        'test.md',
        'Test content',
        'http://example.com',
        30
      )
    ).resolves.toEqual(mockErrorResponse);

    expect(fetchJsonOrTRPCError).toHaveBeenCalled();
  });

  it('should not include expires if expireDays is 0', async () => {
    const mockResponse = {
      status: 'success',
      result: {
        id: '123',
        created_at: '2024-10-01T00:00:00Z',
        updated_at: '2024-10-01T00:00:00Z',
        files: [{ id: 'file123', name: 'file.txt' }],
      },
    };

    mockFetchJsonOrTRPCError.mockResolvedValue(mockResponse);

    await postToPasteGGOrThrow(
      'Test Title',
      'test.md',
      'Test content',
      'http://example.com',
      0
    );

    expect(fetchJsonOrTRPCError).toHaveBeenCalledWith(
      'https://api.paste.gg/v1/pastes',
      'POST',
      { 'Content-Type': 'application/json' },
      {
        name: 'Test Title',
        description: 'Generated by http://example.com ðŸš€',
        visibility: 'unlisted',
        files: [
          {
            name: 'test.md',
            content: {
              format: 'text',
              value: 'Test content',
            },
          },
        ],
      },
      'PasteGG'
    );
  });
});